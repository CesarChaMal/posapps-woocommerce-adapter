buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.unicenta.org/maven2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://repo.unicenta.org/maven2/"
    }
}

dependencies {
    compile("org.springframework:spring-web")
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.codehaus.groovy:groovy-all:2.4.7')
//	compile('org.springframework.boot:spring-boot-starter-tomcat')
	compile('org.apache.tomcat.embed:tomcat-embed-jasper:8.0.30')
	providedCompile('org.springframework.boot:spring-boot-starter-tomcat')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

//    compile('mysql:mysql-connector-java')
    compile('mysql:mysql-connector-java:8.0.13')
    compile('com.amazonaws:aws-lambda-java-core:1.1.0')
    compile('com.amazonaws:aws-lambda-java-log4j:1.0.0')
    compile('com.google.code.gson:gson:2.8.0')
    compile ('org.flywaydb:flyway-core:4.2.0')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.github.tomakehurst:wiremock-standalone:2.11.0')
}

// Task for building the zip file for upload
task buildZip(type: Zip) {
    // set the base name of the zip file
    baseName = "${project.name}"
    from compileGroovy
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip

springBoot {
	mainClass = 'io.posapps.woocom.Application'
}

/*
bootRun {
	// pass command line options from gradle to bootRun
	// usage: gradlew bootRun "-Dspring.profiles.active=local,protractor"
	if (System.properties.containsKey('spring.profiles.active')) {
		systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
	}
}

*/

def profiles = 'local'

bootRun {
	args = ["--spring.profiles.active=" + profiles]
}
